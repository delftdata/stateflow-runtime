version: "3"
services:

  frontend:
    build:
      context: .
      dockerfile: demo/frontend.dockerfile
    image: dev/universalis-demo-frontend:latest
    environment:
      - UNIVERSALIS_HOST=coordinator
      - UNIVERSALIS_PORT=8888
      - PYTHONUNBUFFERED=TRUE
    depends_on:
      - coordinator

  frontend-load-balancer:
    image: nginx:latest
    volumes:
      - ./frontend_nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
    ports:
      - "5000:5000"

  ingress:
    build:
      context: .
      dockerfile: ingress/ingress.Dockerfile
    environment:
      - DISCOVERY_HOST=coordinator
      - DISCOVERY_PORT=8888
    image: dev/universalis-ingress:latest

  ingress-load-balancer:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - ingress
    ports:
      - "4000:4000"

  coordinator:
    build:
      context: .
      dockerfile: coordinator/coordinator.dockerfile
    image: dev/universalis-coordinator:latest
    ports:
      - "8886:8888"
    environment:
      - KAFKA_URL=kafka1:9092

  worker:
    build:
      context: .
      dockerfile: worker/worker.dockerfile
    image: dev/universalis:latest
    environment:
      - INGRESS_TYPE=KAFKA
      - KAFKA_URL=kafka1:9092
      - DISCOVERY_HOST=coordinator
      - DISCOVERY_PORT=8888


# LOCUST

  locust-master:
    image: locustio/locust
    ports:
     - "8089:8089"
    volumes:
      - ./locust-loadtest/:/mnt/locust
    command: -f /mnt/locust/locustfile.py --master -H http://locust-master:8089

  locust-worker:
    image: locustio/locust
    volumes:
      - ./locust-loadtest/:/mnt/locust
    command: -f /mnt/locust/locustfile.py --worker --master-host locust-master


# KAFKA


  zookeeper:
    image: bitnami/zookeeper:3.6.2
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka1:
    image: bitnami/kafka:2.7.0
    container_name: kafka1
    ports:
      - '9093:9093'
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka1:9092,EXTERNAL://localhost:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    depends_on:
      - zookeeper

  kafka2:
    image: bitnami/kafka:2.7.0
    container_name: kafka2
    ports:
      - '9094:9094'
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka2:9092,EXTERNAL://localhost:9094
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    depends_on:
      - zookeeper

  kafka3:
    image: bitnami/kafka:2.7.0
    container_name: kafka3
    ports:
      - '9095:9095'
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9095
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka3:9092,EXTERNAL://localhost:9095
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    depends_on:
      - zookeeper

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    ports:
      - '9000:9000'
    environment:
      - KAFKA_BROKERCONNECT=kafka1:9092,kafka2:9092,kafka3:9092
    depends_on:
      - kafka1
